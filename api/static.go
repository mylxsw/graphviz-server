// Code generated by "esc -pkg api -o api/static.go -prefix=assets assets"; DO NOT EDIT.

package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	if !f.isDir {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is not directory", f.name)
	}

	fis, ok := _escDirs[f.local]
	if !ok {
		return nil, fmt.Errorf(" escFile.Readdir: '%s' is directory, but we have no info about content of this dir, local=%s", f.name, f.local)
	}
	limit := count
	if count <= 0 || limit > len(fis) {
		limit = len(fis)
	}

	if len(fis) == 0 && count > 0 {
		return nil, io.EOF
	}

	return fis[0:limit], nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/graphbiz-server.js": {
		name:    "graphbiz-server.js",
		local:   "assets/graphbiz-server.js",
		size:    1843,
		modtime: 1605196538,
		compressed: `
H4sIAAAAAAAC/5RUTW/jNhC961cMUKOiHEVr76WAvcQWWGCBAunXJnsKcmCkMUmYJg2SUuoE/u8FRUmW
ZafF+mBJnDfvzbwZaVPr0kujgaP/u0Z7uPdWak4022EGbwkAQMMs1FYBhcqU9Q61L75/u1sPMWYt0IAo
3F5JT9LPaRajcgOEWVso1NwL+AQfs3AcacPPoq+thjSN+GP7H7WYtY/Lp3UyEAUBxZz/TVf4z58bkv6U
ZkBpF4gKt7DMsoE9ErWF1c8uNrbIYYLvJLpORib8xeSksZ8njU3APSulsMiu9RiVNsYCCXISKCzWIOET
vEu2hpsbOXEt5DrPbLQiejXJfpRPheyNomkGN7BcnxP8wXb4bm40LLg1EopujUksulr5/2M5UeTvAIdx
nKAjpeB2W27hzZ15QfuFOSTt8PXFaTYyamR/rPTEeewWLpmM6JgkwzshtUfLSv+7qZA4VFh6Y3OQO8bx
+7e7Xmk2xLKCW7YXjXwlb+MtXA05+WgtWHVYQS9GpnUr9MAboOCFdGcR3hTaVOhIVpRKllsyFHxB0hPN
HIYpzUh2EQ6hYl87QYLQ9XhIDTBWVYQ3hZJ6i9VXa3ZtTg7e1pj9QOqD+e9E3hRCcqEkF56E9A55Dfgc
9ujBfLVGR+w56nj+OCP9NywrtniozIse2YeNv+Zg2D9sfEj4YioESil8/OUa8qL4y5KPk/IuVjJrl/DD
fJ7AHDZSqXt/ULgCwUpRW8ydUbLKXyV/ZTwvrXHuVjBfirwy3uUVcwL78K2SGhNomX7dM8t2UBrtmdRo
E5h/OK2626IvRbvoAyIHa2ouNDrX9zocAB3fUwppCp9hsRoOY1ul0c6D2bcadGTYqK+0aywdvRs9y+p0
e4o+mxep+QqWp6NSMOsfDvuWTnLRPruO8TiuRTBdKQzf9fu2ZbmRaMc9x2K7sXToIlzl5kDCbP4NAAD/
/4krDzczBwAA
`,
	},

	"/graphviz-svg/css/graphviz.svg.css": {
		name:    "graphviz.svg.css",
		local:   "assets/graphviz-svg/css/graphviz.svg.css",
		size:    1745,
		modtime: 1605198603,
		compressed: `
H4sIAAAAAAAC/3RUUW/bNhB+9684pBjQFnLSdtgenCfFpmNiMmVIcrM80tLZ4kKTAknFSYb89+EoO51b
BIYh6O6+77vvjtTV5xF8hqntnp3atQE+1p/g25evf8DS9iZIZXywbk819F+h2yvvlTWgPLTocPMMOydN
wCaBrUMEu4W6lW6HCQQL0jxDh85bA3ZDdMrsQEJtu2fis1sIrfLg7TYcpEOQpgHpva2VDNhAY+t+jybI
QJJbpdHDx9AiXJRHxMWnqNOg1ESoDFD6lIWDCq3tAzj0wamaaBJQptZ9Q52c0lrt1VGE4HEUnviChd5j
EhtOYG8btaUnRn9dv9HKtwk0itg3fcAEPAVrNISSprmyDjzq2FxtO4V+MP2jx1hGQh0NNxzH5SlyaO3+
3I+KXW17Z5RvMcIaC95G3X+wDhQhxNZqbQ/ksbamUWTNT05rrFoEubGPGH0Nizc2qHpYQFxJ92PVx5Rv
pdawweP8sKFpy3NrjvrwQZqgpIbOuij8s+XLt0YWDMp8Xt2lBQNewqrIv/MZm8FFWgIvLxK449UiX1dw
lxZFKqp7yOeQinv4i4tZAuzvVcHKEvKC2PhylXE2S4CLabaecXELN+sKRF5Bxpe8YjOo8qh5ZOOsJL4l
K6aLVFTpDc94dZ8Q15xXgpjneQEprNKi4tN1lhawWhervGSQihmIXHAxL7i4ZUsmqkvgAkQO7DsTFZSL
NMtIjejSdbXIC2oUpvnqvuC3iwoWeTZjRQk3DDKe3mRsUBP3MM1Svkxgli7TWxZRebVg0SRVDm3C3YJR
lFRTAem04rkgP9NcVEU6rRKo8qJ6Q9/xkiWQFrykycyLfBmd0nTzOVVxQVDBBiKa/PmC8iK+r0v2xgkz
lmZc3JYEPno91dOWr0ajq8/DgUKNdJXBIDZ0uq0OqoPO+ng46aTSibfugVCXOye79lG9jP3jDv4dAcBb
6QQcahnUI16PXiO/D7Y7MXo4ONl1xPcLz+WxZqyMQXekPbQq4Nh3ssYJGEvoM94ObaeRLjHWIbaJTwHi
tWjQ/yoS0wP1+ICbBxXGwfZ1O66l1rYPJGLw+qyg9+jGg8JZ+qENe/1udm9f3s/591LvhOveeesm0OBW
9jrQCD7Q19/19XCHB0u11VT14c/f6Xf902LkxlvdhyPly1iZBp8m8PXLlyGysSHYPQW6pyGicRsm8C2+
v44+xEmeFqOa0Ebwb0Nti/Sl+n/EPqLbanuYgK+d1fp69PpfAAAA//+V2R+30QYAAA==
`,
	},

	"/graphviz-svg/js/jquery.graphviz.svg.js": {
		name:    "jquery.graphviz.svg.js",
		local:   "assets/graphviz-svg/js/jquery.graphviz.svg.js",
		size:    15838,
		modtime: 1605172954,
		compressed: `
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
`,
	},

	"/index.html": {
		name:    "index.html",
		local:   "assets/index.html",
		size:    1726,
		modtime: 1605198819,
		compressed: `
H4sIAAAAAAAC/7RVT4/jNBQ/p5/CCiMlkVq723JhNu0NcQKBRuKy2oNrvybOuHGwX9IpaC5zAXHhgtB+
AC4IiSPSLmg/DTuFb4Hyt+0uFRo05Ob3nn+/3/v5xSZxihu9HHlxClwuR6T7YlSoYXn1+UfkUwuVgm3M
2tDI82Kt8mtiQS98hzsNLgVAn6QW1gs/RSzcJWNarRwVMs8czQEZbhUi2MnKGHRoecHmdE7fZ8I5NsSo
cM7/VwYmuUtXhlvJEsuLtFJfTlyVNFB9gLoq6dFi1vbmxSsjdw28VBVRcuGr3KEtBSqTt8ReXCyfULK/
e/nm69/+/PZuf/fyr59f/PHql/sXr/c/vopZ0VfNKLlK1RonTlijNdn//tP996+PCuaUfOgEefPdD/e/
ftOCdNmYSVWd6Ghk+8suUWecsKpAgrsCFj7CDbKMV7yN+sRZcdbp7IsS7I7N6IzOuwXNXA3e7l4+Bvxk
Y0oH2xRAszl9Qj/omQ7x/4FUGG0sm9EpnfZ8Tegxqc4NanY8p/+F79zYZq7v5WR4TymOOE7Et7qFNqVc
a26BCrNhPOM3TVvMmjJJaeaaM5oOy38W/zYwzZwErSrb+JKkLOF5gtwwdw0oUrXeMakcHpZ0o/Lzuh/i
zar2BmwFDz3a5Yh4nncRSiPKDeQYUQtc7sJ1mTd/eRh91VR4bqtQpCRMAD+rzb9Cq/IkDDCIItLVeII7
IEHbX3DZBb2LMHjv+OIIIpoqCWH0dNQV0ATwHeTS6iAak7zUekwGPZIjrwnbnZ4GJMLkyFUOlixIzdU4
Egzo3pCn9d09tEq5NAV+YiSEF6HvqsQfkwb92fR5dNjddvNxXTYAPZs+H5O39TbDkoNzwWH37Zj4Nxvt
R097M1YW+HWXlrDmpcbLrljlCJYLbLj6Nt7laXzpGG6HB6j+bpvo0eHHrL3BY9a+Wn8HAAD//8eLM4e+
BgAA
`,
	},

	"/": {
		name:  "/",
		local: `assets`,
		isDir: true,
	},

	"/graphviz-svg": {
		name:  "graphviz-svg",
		local: `assets/graphviz-svg`,
		isDir: true,
	},

	"/graphviz-svg/css": {
		name:  "css",
		local: `assets/graphviz-svg/css`,
		isDir: true,
	},

	"/graphviz-svg/js": {
		name:  "js",
		local: `assets/graphviz-svg/js`,
		isDir: true,
	},
}

var _escDirs = map[string][]os.FileInfo{

	"assets": {
		_escData["/graphbiz-server.js"],
		_escData["/graphviz-svg"],
		_escData["/index.html"],
	},

	"assets/graphviz-svg": {
		_escData["/graphviz-svg/css"],
		_escData["/graphviz-svg/js"],
	},

	"assets/graphviz-svg/css": {
		_escData["/graphviz-svg/css/graphviz.svg.css"],
	},

	"assets/graphviz-svg/js": {
		_escData["/graphviz-svg/js/jquery.graphviz.svg.js"],
	},
}
